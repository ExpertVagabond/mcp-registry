// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "encoding/json"
import "fmt"
import "reflect"

// Schema for MCP server configuration files
type SchemaJson interface{}

type SchemaJsonAbout struct {
	// Description of the server
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// URL to the server icon
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// Display title of the server
	Title string `json:"title" yaml:"title" mapstructure:"title"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonAbout) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["title"]; raw != nil && !ok {
		return fmt.Errorf("field title in SchemaJsonAbout: required")
	}
	type Plain SchemaJsonAbout
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonAbout(plain)
	return nil
}

type SchemaJsonConfig struct {
	// Description of the configuration
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Environment variable configurations
	Env []SchemaJsonConfigEnvElem `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Parameter schema (JSON Schema object)
	Parameters map[string]interface{} `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`

	// Secret configurations
	Secrets []SchemaJsonConfigSecretsElem `json:"secrets,omitempty" yaml:"secrets,omitempty" mapstructure:"secrets,omitempty"`
}

type SchemaJsonConfigEnvElem struct {
	// Example value
	Example *string `json:"example,omitempty" yaml:"example,omitempty" mapstructure:"example,omitempty"`

	// Environment variable name
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Environment variable value
	Value *string `json:"value,omitempty" yaml:"value,omitempty" mapstructure:"value,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonConfigEnvElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in SchemaJsonConfigEnvElem: required")
	}
	type Plain SchemaJsonConfigEnvElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonConfigEnvElem(plain)
	return nil
}

type SchemaJsonConfigSecretsElem struct {
	// Environment variable name
	Env string `json:"env" yaml:"env" mapstructure:"env"`

	// Example value
	Example *string `json:"example,omitempty" yaml:"example,omitempty" mapstructure:"example,omitempty"`

	// Name of the secret
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonConfigSecretsElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["env"]; raw != nil && !ok {
		return fmt.Errorf("field env in SchemaJsonConfigSecretsElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in SchemaJsonConfigSecretsElem: required")
	}
	type Plain SchemaJsonConfigSecretsElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonConfigSecretsElem(plain)
	return nil
}

type SchemaJsonMeta struct {
	// Category of the server
	Category string `json:"category" yaml:"category" mapstructure:"category"`

	// Whether the server is highlighted
	Highlighted *bool `json:"highlighted,omitempty" yaml:"highlighted,omitempty" mapstructure:"highlighted,omitempty"`

	// Tags associated with the server
	Tags []string `json:"tags" yaml:"tags" mapstructure:"tags"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonMeta) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["category"]; raw != nil && !ok {
		return fmt.Errorf("field category in SchemaJsonMeta: required")
	}
	if _, ok := raw["tags"]; raw != nil && !ok {
		return fmt.Errorf("field tags in SchemaJsonMeta: required")
	}
	type Plain SchemaJsonMeta
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonMeta(plain)
	return nil
}

type SchemaJsonRun struct {
	// Command to run the server
	Command []string `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Whether to disable network access
	DisableNetwork *bool `json:"disableNetwork,omitempty" yaml:"disableNetwork,omitempty" mapstructure:"disableNetwork,omitempty"`

	// Environment variables for running the server
	Env map[string]interface{} `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Volume mounts
	Volumes []string `json:"volumes,omitempty" yaml:"volumes,omitempty" mapstructure:"volumes,omitempty"`
}

type SchemaJsonSource struct {
	// Git branch
	Branch *string `json:"branch,omitempty" yaml:"branch,omitempty" mapstructure:"branch,omitempty"`

	// Directory within the project
	Directory *string `json:"directory,omitempty" yaml:"directory,omitempty" mapstructure:"directory,omitempty"`

	// Path to Dockerfile
	Dockerfile *string `json:"dockerfile,omitempty" yaml:"dockerfile,omitempty" mapstructure:"dockerfile,omitempty"`

	// Source project URL
	Project string `json:"project" yaml:"project" mapstructure:"project"`

	// Upstream project URL
	Upstream *string `json:"upstream,omitempty" yaml:"upstream,omitempty" mapstructure:"upstream,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonSource) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["project"]; raw != nil && !ok {
		return fmt.Errorf("field project in SchemaJsonSource: required")
	}
	type Plain SchemaJsonSource
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonSource(plain)
	return nil
}

type SchemaJsonToolsElem struct {
	// Container corresponds to the JSON schema field "container".
	Container SchemaJsonToolsElemContainer `json:"container" yaml:"container" mapstructure:"container"`

	// Description of the tool
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// Name of the tool
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Parameter schema for the tool (JSON Schema object)
	Parameters map[string]interface{} `json:"parameters" yaml:"parameters" mapstructure:"parameters"`
}

type SchemaJsonToolsElemContainer struct {
	// Command to run in the container
	Command []string `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Docker image for the tool
	Image string `json:"image" yaml:"image" mapstructure:"image"`

	// Volume mounts for the container
	Volumes []string `json:"volumes,omitempty" yaml:"volumes,omitempty" mapstructure:"volumes,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonToolsElemContainer) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["image"]; raw != nil && !ok {
		return fmt.Errorf("field image in SchemaJsonToolsElemContainer: required")
	}
	type Plain SchemaJsonToolsElemContainer
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonToolsElemContainer(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonToolsElem) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["container"]; raw != nil && !ok {
		return fmt.Errorf("field container in SchemaJsonToolsElem: required")
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in SchemaJsonToolsElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in SchemaJsonToolsElem: required")
	}
	if _, ok := raw["parameters"]; raw != nil && !ok {
		return fmt.Errorf("field parameters in SchemaJsonToolsElem: required")
	}
	type Plain SchemaJsonToolsElem
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SchemaJsonToolsElem(plain)
	return nil
}

type SchemaJsonType string

const SchemaJsonTypePoci SchemaJsonType = "poci"
const SchemaJsonTypeServer SchemaJsonType = "server"

var enumValues_SchemaJsonType = []interface{}{
	"server",
	"poci",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SchemaJsonType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SchemaJsonType, v)
	}
	*j = SchemaJsonType(v)
	return nil
}
